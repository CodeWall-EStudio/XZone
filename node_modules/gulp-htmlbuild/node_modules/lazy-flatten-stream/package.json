{
  "name": "lazy-flatten-stream",
  "version": "0.1.0",
  "description": "Flatten a stream of streams into a single stream",
  "keywords": [],
  "author": {
    "name": "Raynos",
    "email": "raynos2@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Raynos/lazy-flatten-stream.git"
  },
  "main": "index",
  "homepage": "https://github.com/Raynos/lazy-flatten-stream",
  "contributors": [
    {
      "name": "Jake Verbaten"
    }
  ],
  "bugs": {
    "url": "https://github.com/Raynos/lazy-flatten-stream/issues",
    "email": "raynos2@gmail.com"
  },
  "dependencies": {
    "proxy-stream": "~0.2.5",
    "write-stream": "~0.4.0"
  },
  "devDependencies": {
    "read-stream": "~0.4.0",
    "lazy-map-stream": "~0.1.5"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/Raynos/lazy-flatten-stream/raw/master/LICENSE"
    }
  ],
  "scripts": {},
  "readme": "# lazy-flatten-stream\n\nFlatten a stream of streams into a single stream\n\n## Example\n\n```\nvar from = require(\"read-stream\")\n    , to = require(\"write-stream\")\n    , flatten = require(\"..\")\n    , map = require(\"lazy-map-stream\")\n    , assert = require(\"assert\")\n    , list = []\n\n// expand(stream, iterator) -> flatten(map(stream, iterator))\nvar flattened = expand(from([\n    [1,2,3]\n    , [4,5,6]\n    , [7,8,9]\n]), function (list) {\n    return from(list)\n})\n\nflattened.pipe(to(list, function () {\n    // The flattened values\n    assert.deepEqual(list, [1,2,3,4,5,6,7,8,9])\n    console.log(\"list\", list)\n}))\n\n// flatten(stream)\n// Assumes the stream contains chunk which are themself streams\n// it then flattens out all of the chunks from the streams into one stream\nfunction expand(stream, iterator) {\n    return flatten(map(stream, iterator))\n}\n```\n\n## Installation\n\n`npm install lazy-flatten-stream`\n\n## Contributors\n\n - Raynos\n\n## MIT Licenced",
  "readmeFilename": "README.md",
  "_id": "lazy-flatten-stream@0.1.0",
  "_from": "lazy-flatten-stream@~0.1.0"
}
